---
import type { Polymorphic } from "astro/types";

type Tag = "a" | "button";

type Props<TagGeneric extends Tag> = {
	tag: TagGeneric;
	variant?: "primary" | "secondary";
	classList?: string[];
} & Polymorphic<{ as: TagGeneric }>;

const {
	tag: Tag,
	variant = "primary",
	classList = [],
	href,
	type = "button",
	...rest
} = Astro.props;

const baseAttributes = {
	classes: ["title", variant, ...classList],
	...rest,
};

const anchorAttributes = {
	href: href,
};

const buttonAttributes = {
	type: type,
};

const attributeBasedOnTag = Tag === "a" ? anchorAttributes : buttonAttributes;

const allAttributes = { ...baseAttributes, ...attributeBasedOnTag };

const { classes, ...attributes } = allAttributes;
---

<Tag
	class:list={[classes]}
	{...attributes}
>
	<slot />
</Tag>

<style>
	button,
	a {
		display: inline-block;

		padding: 0.625em 1.25em;
		border: 1px solid var(--black-400);

		background-color: var(--red-700);

		font-size: var(--fs-2);
		font-weight: var(--fw-3);
		color: var(--white-700);

		box-shadow: 4px 4px 0px rgba(0, 0, 0, 0.25);
	}

	button:hover,
	a:hover {
		background-color: var(--red-800);
	}

	button.secondary,
	a.secondary {
		background-color: transparent;

		color: var(--black-400);
	}

	button.secondary:hover. a.secondary:hover {
		background-color: rgba(0, 0, 0, 0.05);
	}
</style>
