---
type Tag = "a" | "button";

type AnchorProps = {
	href: string;
};

type ButtonProps = {
	type?: "submit" | "button" | "reset";
};

type Props<T extends Tag> = {
	tag: T;
	variant?: "primary" | "secondary";
	id?: string;
} & (T extends "a" ? AnchorProps : ButtonProps);

const { tag, variant = "primary", id = "", href, type = "button" } = Astro.props;

const Tag = tag;

const baseAttributes = {
	id: id,
	class: `title  ${variant}`,
};

const anchorAttributes = {
	href: href,
};

const buttonAttributes = {
	type: type,
};

const attributeBasedOnTag = tag === "a" ? anchorAttributes : buttonAttributes;

const attributes = { ...baseAttributes, ...attributeBasedOnTag };
---

<Tag {...attributes}>
	<slot />
</Tag>

<style>
	button,
	a {
		display: inline-block;

		padding: 0.625em 1.25em;
		border: 1px solid var(--black-400);

		background-color: var(--red-700);

		font-size: var(--fs-2);
		font-weight: var(--fw-3);
		color: var(--white-700);

		box-shadow: 4px 4px 0px rgba(0, 0, 0, 0.25);
	}

	button:hover,
	a:hover {
		background-color: var(--red-800);
	}

	button.secondary,
	a.secondary {
		background-color: transparent;

		color: var(--black-400);
	}

	button.secondary:hover. a.secondary:hover {
		background-color: rgba(0, 0, 0, 0.05);
	}
</style>
